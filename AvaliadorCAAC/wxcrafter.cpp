//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"

// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;

MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent,
                                       wxWindowID id,
                                       const wxString& title,
                                       const wxPoint& pos,
                                       const wxSize& size,
                                       long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("logo16"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon(icn);
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("logo32"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon(icn);
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("logo64"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon(icn);
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("logo128"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon(icn);
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("logo256"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon(icn);
    }
    SetIcons(app_icons);

    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);

    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, wxT("Arquivo"));

    m_menuItemNew =
        new wxMenuItem(m_menuFile, wxID_NEW, wxT("Novo Processo\tCtrl-N"), wxT("Cria um novo processo"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemNew);

    m_menuItemSave = new wxMenuItem(m_menuFile, wxID_SAVE, wxT("Salvar Processo\tCtrl-S"),
                                    wxT("Grava o processo no disco"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemSave);

    m_menuItemOpen = new wxMenuItem(m_menuFile, wxID_OPEN, wxT("Abrir Processo\tCtrl-O"),
                                    wxT("Abre um processo já criado"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemOpen);

    m_menuItemOpenDrive = new wxMenuItem(m_menuFile, wxID_FIND, wxT("Abrir Processo do Drive\tCtrl-D"),
                                         wxT("Procura e abre arquivos do Drive"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemOpenDrive);

    m_menuItemExit = new wxMenuItem(m_menuFile, wxID_EXIT, wxT("Sair\tAlt-X"), wxT("Sai do programa"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemExit);

    m_menuReport = new wxMenu();
    m_menuBar->Append(m_menuReport, wxT("Relatório"));

    m_menuItemEditProcess =
        new wxMenuItem(m_menuReport, wxID_ANY, wxT("Editar dados do processo"),
                       wxT("Edita os dados do processo (ex: nome do estudante, protocolo, etc.)"), wxITEM_NORMAL);
    m_menuReport->Append(m_menuItemEditProcess);

    m_menuItemGenerateReport = new wxMenuItem(m_menuReport, wxID_ANY, wxT("Gerar relatório\tCtrl-R"),
                                              wxT("Gera o relatório do processo atual"), wxITEM_NORMAL);
    m_menuReport->Append(m_menuItemGenerateReport);

    m_menuHelp = new wxMenu();
    m_menuBar->Append(m_menuHelp, wxT("Ajuda"));

    m_menuItemAbout = new wxMenuItem(m_menuHelp, wxID_ABOUT, wxT("Sobre..."), wxT("Exibe informações sobre o programa"),
                                     wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemAbout);

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_mainPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizerLvl1_1->Add(m_mainPanel, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerPanel = new wxBoxSizer(wxVERTICAL);
    m_mainPanel->SetSizer(boxSizerPanel);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerPanel->Add(boxSizerLvl2_2, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_3 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_2->Add(boxSizerLvl3_3, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextProcessNumber = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Processo: 00000.000000/0000-00"),
                                                 wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    wxFont m_staticTextProcessNumberFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false,
                                         wxT("Arial"));
    m_staticTextProcessNumber->SetFont(m_staticTextProcessNumberFont);

    boxSizerLvl3_3->Add(m_staticTextProcessNumber, 0, wxALL, WXC_FROM_DIP(5));

    m_staticTextStudentName = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Aluno:"), wxDefaultPosition,
                                               wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    wxFont m_staticTextStudentNameFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false,
                                       wxT("Arial"));
    m_staticTextStudentName->SetFont(m_staticTextStudentNameFont);

    boxSizerLvl3_3->Add(m_staticTextStudentName, 0, wxALL, WXC_FROM_DIP(5));

    m_staticBitmap137 = new wxStaticBitmap(m_mainPanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("logoIFG50")),
                                           wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);

    boxSizerLvl2_2->Add(m_staticBitmap137, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerPanel->Add(boxSizerLvl2_1, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_1, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxArrayString m_pgMgrArr;
    wxUnusedVar(m_pgMgrArr);
    wxArrayInt m_pgMgrIntArr;
    wxUnusedVar(m_pgMgrIntArr);
    m_pgMgr =
        new wxPropertyGridManager(m_mainPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)),
                                  wxPG_DESCRIPTION | wxPG_HIDE_MARGIN | wxPG_SPLITTER_AUTO_CENTER | wxPG_BOLD_MODIFIED);

    boxSizerLvl3_1->Add(m_pgMgr, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_pgMgrArr.Clear();
    m_pgMgrIntArr.Clear();
    m_pgMgrArr.Add(wxT("Escolha o item..."));
    m_pgMgrArr.Add(wxT("I - Visitas técnicas"));
    m_pgMgrArr.Add(wxT("II - Atividade prática em campo"));
    m_pgMgrArr.Add(
        wxT("III - Participação em eventos técnicos, culturais, científicos, acadêmicos, artísticos e esportivos."));
    m_pgMgrArr.Add(wxT("IV - Participação em comissão organizadora de eventos institucionais e outros."));
    m_pgMgrArr.Add(wxT("V - Apresentação de trabalhos em feiras, congressos, mostras, seminários e outros."));
    m_pgMgrArr.Add(wxT("VI - Intérprete de línguas emeventos institucionais e outros. "));
    m_pgMgrArr.Add(wxT("VII - Monitorias por período mínimo de um semestre letivo."));
    m_pgMgrArr.Add(wxT("VIII - Participação em projetos e programas de iniciação científica e tecnológica como aluno "
                       "do projeto, bolsista ou voluntário."));
    m_pgMgrArr.Add(wxT("IX - Participação em programa de iniciação a docência."));
    m_pgMgrArr.Add(wxT("X - Participação em projetos de ensino, pesquisa e extensão com duração 60 horas mínima de um "
                       "semestre letivo."));
    m_pgMgrArr.Add(wxT("XI - Cursos e minicursos."));
    m_pgMgrArr.Add(wxT("XII - Estágio curricular não obrigatório igual ou superior a cem horas"));
    m_pgMgrArr.Add(wxT("XIII - Participação como representante de turma por um período mínimo de um semestre letivo"));
    m_pgMgrArr.Add(wxT("XIV - Participação como representante discente nas instâncias da Instituição por um período "
                       "mínimo de um semestre letivo."));
    m_pgMgrArr.Add(wxT("XV - Participação em órgãos e entidades estudantis, de classe, sindicais ou comunitárias."));
    m_pgMgrArr.Add(wxT("XVI - Realização de trabalho comunitário."));
    m_pgMgrArr.Add(wxT("XVII - Participação como ouvinte em defesas de trabalhos acadêmicos."));
    m_pgMgrArr.Add(wxT("Atividade não pontuada"));
    m_pgPropItem = m_pgMgr->Append(new wxEnumProperty(wxT("Item"), wxPG_LABEL, m_pgMgrArr, m_pgMgrIntArr, 0));
    m_pgPropItem->SetHelpString(
        wxT("Tipo de atividade efetuada pelo aluno de acordo com as resoluções n°16 e n°20 de 2011.\nCaso a atividade "
            "não se enquadre, deve ser selecionada a opção \"Atividade não pontuada\"."));
    m_pgPropItem->SetEditor(wxT("Choice"));

    m_pgPropEvent = m_pgMgr->Append(new wxLongStringProperty(wxT("Evento"), wxPG_LABEL, wxT("Nome do evento...")));
    m_pgPropEvent->SetHelpString(wxT("Nome do evento relacionado à atividade."));

    m_pgPropEventDesc = m_pgMgr->Append(new wxLongStringProperty(wxT("Descrição do evento"), wxPG_LABEL, wxT("")));
    m_pgPropEventDesc->SetHelpString(
        wxT("Descrição do evento. Nesse campo devem ser colocados os detalhes da atividade exercida no evento. Deixe "
            "em branco para não ser exibido no relatório de avaliação.\nEx.: \"Participação no evento\", "
            "\"Apresentação de trabalho intitulado...\""));

    m_pgPropShiftN = m_pgMgr->Append(new wxIntProperty(wxT("Turno"), wxPG_LABEL, 1));
    m_pgPropShiftN->SetHelpString(wxT(
        "Aqui são inseridas a quantidade de Turnos, Apresentações ou Participações, de acordo com o item definido."));

    m_pgPropIFGEvent = m_pgMgr->Append(new wxBoolProperty(wxT("Evento do IFG"), wxPG_LABEL, 1));
    m_pgPropIFGEvent->SetHelpString(wxT("Desmarque essa opção caso o evento NÃO seja promovido pelo IFG."));

    m_pgPropInstitution =
        m_pgMgr->Append(new wxLongStringProperty(wxT("Instituição"), wxPG_LABEL, wxT("Nome da instituição...")));
    m_pgPropInstitution->SetHelpString(wxT("Instituição promotora do evento.\nEx.: IFG"));

    m_pgPropDate = m_pgMgr->Append(new wxStringProperty(wxT("Data do evento"), wxPG_LABEL, wxT("-")));
    m_pgPropDate->SetHelpString(
        wxT("Período ou data de ocorrência do evento.\nEx.: \"09/05/2020\", \"22/03/2020 a 09/05/2020\""));

    m_pgPropCH = m_pgMgr->Append(new wxFloatProperty(wxT("Carga horária (h)"), wxPG_LABEL, 0));
    m_pgPropCH->SetHelpString(wxT("Carga horária, em horas, que consta no documento comprobatório.\nObs.: Não devem "
                                  "ser descontados valores nesse campo. O programa irá automaticamente calcular as "
                                  "restrições conforme as resoluções n°16 ou n°20 de 2011."));

    m_pgPropInvalidate = m_pgMgr->Append(new wxBoolProperty(wxT("Invalidar CH"), wxPG_LABEL, 0));
    m_pgPropInvalidate->SetHelpString(
        wxT("Marque essa opção caso a carga horária deva ser invalidada.\nEx.: Documento duplicado\nObs.: Atividades "
            "com carga horária invalidada não serão contabilizadas nas restrições impostas pelas resoluções n°16 ou "
            "n°20 de 2011."));

    m_pgPropShowInReport = m_pgMgr->Append(new wxBoolProperty(wxT("Mostrar no relatório"), wxPG_LABEL, 1));
    m_pgPropShowInReport->SetHelpString(
        wxT("Desmarque essa opção para que essa atividade não seja exibida no relatório.\nObs.: Mesmo que a atividade "
            "não seja exibida, as restrições que ela implica serão contabilizadas."));

    m_pgPropIgnoreRestrictions = m_pgMgr->Append(new wxBoolProperty(wxT("Ignorar restrições"), wxPG_LABEL, 0));
    m_pgPropIgnoreRestrictions->SetHelpString(
        wxT("Marque essa opção para que as restrições dessa atividade sejam desconsideradas."));

    m_pgPropObs = m_pgMgr->Append(new wxLongStringProperty(wxT("Observações"), wxPG_LABEL, wxT("")));
    m_pgPropObs->SetHelpString(
        wxT("Observações da atividade. Deixe em branco para não ser exibido no relatório de avaliação."));
    m_pgMgr->SetMinSize(wxSize(400, -1));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxALL | wxEXPAND | wxALIGN_LEFT, WXC_FROM_DIP(5));

    m_buttonAppendItem = new wxButton(m_mainPanel, wxID_ANY, wxT("Inserir Item"), wxDefaultPosition,
                                      wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_buttonAppendItem, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_buttonRemoveItem = new wxButton(m_mainPanel, wxID_ANY, wxT("Remover Item"), wxDefaultPosition,
                                      wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_buttonRemoveItem, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    boxSizerLvl4_1->Add(10, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_bmpButtonUp =
        new wxBitmapButton(m_mainPanel, wxID_ANY, wxArtProvider::GetBitmap(wxART_GO_UP, wxART_TOOLBAR, wxDefaultSize),
                           wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), wxBU_AUTODRAW);

    boxSizerLvl4_1->Add(m_bmpButtonUp, 0, wxALL, WXC_FROM_DIP(5));

    m_bmpButtonDown =
        new wxBitmapButton(m_mainPanel, wxID_ANY, wxArtProvider::GetBitmap(wxART_GO_DOWN, wxART_TOOLBAR, wxDefaultSize),
                           wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), wxBU_AUTODRAW);

    boxSizerLvl4_1->Add(m_bmpButtonDown, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_2, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_grid = new wxGrid(m_mainPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)),
                        wxWANTS_CHARS | wxALWAYS_SHOW_SB);
    m_grid->CreateGrid(0, 0);
    m_grid->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_grid->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
#if wxVERSION_NUMBER >= 2904
    m_grid->UseNativeColHeader(true);
#endif
    m_grid->EnableEditing(false);

    boxSizerLvl3_2->Add(m_grid, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl3_2->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl4_3->Add(boxSizerLvl5_1, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextTotalRequested = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Total solicitado = 0,0 h"),
                                                  wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    wxFont m_staticTextTotalRequestedFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false,
                                          wxT("Arial"));
    m_staticTextTotalRequested->SetFont(m_staticTextTotalRequestedFont);

    boxSizerLvl5_1->Add(m_staticTextTotalRequested, 0, 0, WXC_FROM_DIP(5));

    m_staticTextTotalValidated = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Total validado = 0,0 h"),
                                                  wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    m_staticTextTotalValidated->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));
    wxFont m_staticTextTotalValidatedFont(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false,
                                          wxT("Arial"));
    m_staticTextTotalValidated->SetFont(m_staticTextTotalValidatedFont);

    boxSizerLvl5_1->Add(m_staticTextTotalValidated, 0, 0, WXC_FROM_DIP(5));

    boxSizerLvl4_3->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl4_3->Add(boxSizerLvl5_2, 0, 0, WXC_FROM_DIP(5));

    m_staticTextSubLimited = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Carga horária limitada pela resolução"),
                                              wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    m_staticTextSubLimited->SetForegroundColour(wxColour(wxT("rgb(255,100,0)")));

    boxSizerLvl5_2->Add(m_staticTextSubLimited, 0, wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_staticTextSubIgnored = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Restrições de carga horária ignoradas"),
                                              wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    m_staticTextSubIgnored->SetForegroundColour(wxColour(wxT("rgb(148,0,211)")));

    boxSizerLvl5_2->Add(m_staticTextSubIgnored, 0, wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_staticTextSubInvalidated = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Carga horária invalidada"),
                                                  wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    m_staticTextSubInvalidated->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));

    boxSizerLvl5_2->Add(m_staticTextSubInvalidated, 0, wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_staticTextSubNoReport = new wxStaticText(m_mainPanel, wxID_ANY, wxT("Item não impresso no relatório"),
                                               wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);
    m_staticTextSubNoReport->SetForegroundColour(wxColour(wxT("rgb(128,128,128)")));
    wxFont m_staticTextSubNoReportFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticTextSubNoReportFont.SetStyle(wxFONTSTYLE_ITALIC);
    m_staticTextSubNoReport->SetFont(m_staticTextSubNoReportFont);

    boxSizerLvl5_2->Add(m_staticTextSubNoReport, 0, wxALIGN_RIGHT, WXC_FROM_DIP(5));

    SetName(wxT("MainFrameBaseClass"));
    SetMinClientSize(wxSize(600, 400));
    SetSize(wxDLG_UNIT(this, wxSize(800, 600)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(MainFrameBaseClass::OnCloseEvent), NULL, this);
    this->Connect(m_menuItemNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnNew),
                  NULL, this);
    this->Connect(m_menuItemSave->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(MainFrameBaseClass::OnSave), NULL, this);
    this->Connect(m_menuItemOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(MainFrameBaseClass::OnOpen), NULL, this);
    this->Connect(m_menuItemOpenDrive->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(MainFrameBaseClass::OnOpenDrive), NULL, this);
    this->Connect(m_menuItemExit->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItemEditProcess->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(MainFrameBaseClass::EditProcess), NULL, this);
    this->Connect(m_menuItemGenerateReport->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(MainFrameBaseClass::GenerateReport), NULL, this);
    this->Connect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                  wxCommandEventHandler(MainFrameBaseClass::OnAboutClick), NULL, this);
    m_mainPanel->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBaseClass::OnPanelKeyDown), NULL, this);
    m_pgMgr->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBaseClass::OnPGChange), NULL, this);
    m_buttonAppendItem->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::AppendItem),
                                NULL, this);
    m_buttonRemoveItem->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::RemoveItem),
                                NULL, this);
    m_bmpButtonUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::GoUp), NULL, this);
    m_bmpButtonDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::GoDown), NULL,
                             this);
    m_grid->Connect(wxEVT_GRID_SELECT_CELL, wxGridEventHandler(MainFrameBaseClass::GridCellSelected), NULL, this);
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(MainFrameBaseClass::OnCloseEvent), NULL, this);
    this->Disconnect(m_menuItemNew->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::OnNew), NULL, this);
    this->Disconnect(m_menuItemSave->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::OnSave), NULL, this);
    this->Disconnect(m_menuItemOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::OnOpen), NULL, this);
    this->Disconnect(m_menuItemOpenDrive->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::OnOpenDrive), NULL, this);
    this->Disconnect(m_menuItemExit->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItemEditProcess->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::EditProcess), NULL, this);
    this->Disconnect(m_menuItemGenerateReport->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::GenerateReport), NULL, this);
    this->Disconnect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED,
                     wxCommandEventHandler(MainFrameBaseClass::OnAboutClick), NULL, this);
    m_mainPanel->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBaseClass::OnPanelKeyDown), NULL, this);
    m_pgMgr->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBaseClass::OnPGChange), NULL, this);
    m_buttonAppendItem->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::AppendItem),
                                   NULL, this);
    m_buttonRemoveItem->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::RemoveItem),
                                   NULL, this);
    m_bmpButtonUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::GoUp), NULL,
                              this);
    m_bmpButtonDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::GoDown), NULL,
                                this);
    m_grid->Disconnect(wxEVT_GRID_SELECT_CELL, wxGridEventHandler(MainFrameBaseClass::GridCellSelected), NULL, this);
}

NewProcessBase::NewProcessBase(wxWindow* parent,
                               wxWindowID id,
                               const wxString& title,
                               const wxPoint& pos,
                               const wxSize& size,
                               long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextProcess = new wxStaticText(this, wxID_ANY, wxT("Número do protocolo"), wxDefaultPosition,
                                           wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextProcess, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_textCtrlProcessNumber =
        new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlProcessNumber->SetHint(wxT("00000.000000/0000-00"));
#endif

    boxSizerLvl2_1->Add(m_textCtrlProcessNumber, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStudentName = new wxStaticText(this, wxID_ANY, wxT("Nome do estudante"), wxDefaultPosition,
                                               wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl2_2->Add(m_staticTextStudentName, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_textCtrlStudentName =
        new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStudentName->SetHint(wxT("Nome completo do estudante"));
#endif

    boxSizerLvl2_2->Add(m_textCtrlStudentName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl2_3 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNumDoc = new wxStaticText(this, wxID_ANY, wxT("Número de documentos"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl2_3->Add(m_staticTextNumDoc, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_textCtrlNumDoc = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlNumDoc->SetHint(wxT("Ex: 10"));
#endif

    boxSizerLvl2_3->Add(m_textCtrlNumDoc, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl2_4 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTexRes =
        new wxStaticText(this, wxID_ANY, wxT("Resolução"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl2_4->Add(m_staticTexRes, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    wxArrayString m_choiceResolutionArr;
    m_choiceResolutionArr.Add(wxT("Resolução n°16 de dezembro de 2011 (Cursos Superiores)"));
    m_choiceResolutionArr.Add(wxT("Resolução n°20 de dezembro de 2011 (Cursos Técnicos)"));
    m_choiceResolution =
        new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), m_choiceResolutionArr, 0);

    boxSizerLvl2_4->Add(m_choiceResolution, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerOKCancel = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerOKCancel, 0, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    boxSizerOKCancel->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, wxT("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerOKCancel->Add(m_buttonOK, 0, wxALL, WXC_FROM_DIP(5));

    m_buttonCancel =
        new wxButton(this, wxID_ANY, wxT("Cancelar"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerOKCancel->Add(m_buttonCancel, 0, wxALL, WXC_FROM_DIP(5));

    SetName(wxT("NewProcessBase"));
    SetMinClientSize(wxSize(400, -1));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewProcessBase::OnOKClick), NULL, this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewProcessBase::OnCancelClick), NULL,
                            this);
}

NewProcessBase::~NewProcessBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewProcessBase::OnOKClick), NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewProcessBase::OnCancelClick), NULL,
                               this);
}

SearchInDriveBase::SearchInDriveBase(wxWindow* parent,
                                     wxWindowID id,
                                     const wxString& title,
                                     const wxPoint& pos,
                                     const wxSize& size,
                                     long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextProcess = new wxStaticText(this, wxID_ANY, wxT("Número do protocolo"), wxDefaultPosition,
                                           wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextProcess, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_textCtrlProcessNumber =
        new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlProcessNumber->SetHint(wxT("Insira o número do protocolo ou parte dele"));
#endif

    boxSizerLvl2_1->Add(m_textCtrlProcessNumber, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStudentName = new wxStaticText(this, wxID_ANY, wxT("Nome do estudante"), wxDefaultPosition,
                                               wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl2_2->Add(m_staticTextStudentName, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_textCtrlStudentName =
        new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStudentName->SetHint(wxT("Insira o nome completo do estudante ou parte dele"));
#endif

    boxSizerLvl2_2->Add(m_textCtrlStudentName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextObs =
        new wxStaticText(this, wxID_ANY, wxT("Obs.: Não é necessário preencher ambos os campos de pesquisa"),
                         wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_staticTextObs->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));

    boxSizerLvl1_1->Add(m_staticTextObs, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_buttonRunSearch =
        new wxButton(this, wxID_ANY, wxT("Buscar"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl1_1->Add(m_buttonRunSearch, 0, wxALL | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl2_3 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_3, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_listCtrlProcess =
        new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLC_REPORT);

    boxSizerLvl2_3->Add(m_listCtrlProcess, 1, wxEXPAND, WXC_FROM_DIP(5));
    m_listCtrlProcess->SetMinSize(wxSize(-1, 150));

    wxBoxSizer* boxSizerOKCancel = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerOKCancel, 0, wxALL | wxEXPAND | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    boxSizerOKCancel->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, wxT("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerOKCancel->Add(m_buttonOK, 0, wxALL, WXC_FROM_DIP(5));

    m_buttonCancel =
        new wxButton(this, wxID_ANY, wxT("Cancelar"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerOKCancel->Add(m_buttonCancel, 0, wxALL, WXC_FROM_DIP(5));

    SetName(wxT("SearchInDriveBase"));
    SetMinClientSize(wxSize(400, -1));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonRunSearch->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(SearchInDriveBase::OnSearchButtonClick), NULL, this);
    m_listCtrlProcess->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(SearchInDriveBase::OnItemSelected),
                               NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SearchInDriveBase::OnOKButtonClick), NULL,
                        this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SearchInDriveBase::OnCancelButtonClick),
                            NULL, this);
}

SearchInDriveBase::~SearchInDriveBase()
{
    m_buttonRunSearch->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                  wxCommandEventHandler(SearchInDriveBase::OnSearchButtonClick), NULL, this);
    m_listCtrlProcess->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED,
                                  wxListEventHandler(SearchInDriveBase::OnItemSelected), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SearchInDriveBase::OnOKButtonClick),
                           NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(SearchInDriveBase::OnCancelButtonClick), NULL, this);
}
